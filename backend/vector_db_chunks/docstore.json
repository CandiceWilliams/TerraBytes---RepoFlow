{"docstore/metadata": {"server/api.js#chunk-1": {"doc_hash": "5137ad537fc684fdd19a021e8a85c96fe969815825d9faac7e66a810ecf7932b"}, "a01fca93-db5a-4f76-ac99-33b63d72767b": {"doc_hash": "0f5ab6de996cb3bab8ede59f33d11103664d5e969647d4b5f4ac2afbc7200057", "ref_doc_id": "server/api.js#chunk-1"}}, "docstore/ref_doc_info": {"server/api.js#chunk-1": {"node_ids": ["a01fca93-db5a-4f76-ac99-33b63d72767b"], "metadata": {"file": "server/api.js", "name": "fetchPopularMovies", "description": "Fetches popular movies from The Movie Database (TMDb) API, processes them to include genre names, director, and top actors, and returns a formatted list.", "keywords": ["movies", "API", "TMDb", "fetch", "popular", "axios", "genres", "credits"]}}}, "docstore/data": {"a01fca93-db5a-4f76-ac99-33b63d72767b": {"__data__": {"id_": "a01fca93-db5a-4f76-ac99-33b63d72767b", "embedding": null, "metadata": {"file": "server/api.js", "name": "fetchPopularMovies", "description": "Fetches popular movies from The Movie Database (TMDb) API, processes them to include genre names, director, and top actors, and returns a formatted list.", "keywords": ["movies", "API", "TMDb", "fetch", "popular", "axios", "genres", "credits"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "server/api.js#chunk-1", "node_type": "4", "metadata": {"file": "server/api.js", "name": "fetchPopularMovies", "description": "Fetches popular movies from The Movie Database (TMDb) API, processes them to include genre names, director, and top actors, and returns a formatted list.", "keywords": ["movies", "API", "TMDb", "fetch", "popular", "axios", "genres", "credits"]}, "hash": "5137ad537fc684fdd19a021e8a85c96fe969815825d9faac7e66a810ecf7932b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "import axios from \"axios\";\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"d8fac9975782d13079fa284507f14ef8\";\n\nconst fetchPopularMovies = async (start, end) => {\n  try {\n    const movies = [];\n    for (let i = start; i <= end; i++) {\n      if (i > 0) {\n        const movies_response = await axios.get(`${BASE_URL}/movie/popular`, {\n          params: {\n            api_key: API_KEY,\n            language: \"en-US\",\n            page: i,\n          },\n        });\n        const genres_response = await axios.get(\n          `${BASE_URL}/genre/movie/list`,\n          {\n            params: {\n              api_key: API_KEY,\n              language: \"en-US\",\n            },\n          }\n        );\n        const genres_list = genres_response.data.genres;\n\n        const getCrew = async (movie_id) => {\n          try {\n            const crew_response = await axios.get(\n              `${BASE_URL}/movie/${movie_id}/credits`,\n              {\n                params: {\n                  api_key: API_KEY,\n                  language: \"en-US\",\n                },\n              }\n            );\n            const director =\n              crew_response.data.crew.find(\n                (member) => member.job === \"Director\"\n              )?.name || \"Unknown\";\n\n            const actors = crew_response.data.cast\n              .slice(0, 3)\n              .map((actor) => actor.name);\n            return { director, actors };\n          } catch (error) {\n            console.error(\"Error fetching crew:\", error);\n          }\n        };\n\n        const movieData = await Promise.all(\n          movies_response.data.results.map(async (movie, index) => {\n            const { director, actors } = await getCrew(movie.id);\n            return {\n              id: movies.length + index + 1,\n              genres: genres_list\n                .filter((genre) => movie.genre_ids.includes(genre[\"id\"]))\n                .map((genre) => genre[\"name\"]),\n              title: movie.title,\n              overview: movie.overview,\n              poster_path: movie.poster_path,\n              director,\n              actors,\n            };\n          })\n        );\n\n        movies.push(...movieData);\n      }\n    }\n    //console.log(JSON.stringify(movies, null, 2));\n    return movies;\n  } catch (error) {\n    console.error(\"Error fetching or writing movies:\", error);\n  }\n};\n\nexport default fetchPopularMovies;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2386, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}}