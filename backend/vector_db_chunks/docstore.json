{"docstore/metadata": {"06_wc/all_test.sh#chunk-1": {"doc_hash": "921180ebc12a4122f243e6913550a27db56cfb1a508e2bd5fa4731558173e72b"}, "06_wc/README.md#chunk-1": {"doc_hash": "c07aae8be9b55adea25d55903645cb571926cad1fdfc3becfc804afb7d861d69"}, "06_wc/README.md#chunk-2": {"doc_hash": "0aa4f92846cc3c007bdaac5ce6ad9284930419313eae607c02dd5fbaaf911f82"}, "06_wc/README.md#chunk-3": {"doc_hash": "869d5abcb341ec432eeaf259fc51a126590628de504b7426bea5c1f0f9fb08ac"}, "06_wc/solution.py#chunk-1": {"doc_hash": "8ae75fdd9dc00db06b7e822ed863dff06eb67fed1679b7a0a5331c399d1b8928"}, "06_wc/test.py#chunk-1": {"doc_hash": "459eb87ec900172169d88127136803bfada88dff241b644e819245480957255f"}, "06_wc/test.py#chunk-2": {"doc_hash": "ad8bd1a79e496aa81d6c14ea32fc12589f10ea12120b00c21f47f7c5b27c3389"}, "06_wc/test.py#chunk-3": {"doc_hash": "e63ad538abb48cbadda04054e076689fc1ef5b1171ba4d3c82efcdfc7084ebaf"}, "06_wc/test.py#chunk-4": {"doc_hash": "027e1536bf250c5559edd1fd9627acd62cbc9045d02488a5a9bc5ec0beaf398b"}, "06_wc/test.py#chunk-5": {"doc_hash": "b6db4dca0ee953d2acec74e2d4194c0b317b338d7878a7c2d26618b2a2e83f18"}, "06_wc/test.py#chunk-6": {"doc_hash": "7a09e2160598050dce062cde20bb126ae406c85793300a5f5c07575b7e9fb783"}, "06_wc/test.py#chunk-7": {"doc_hash": "e729e3feb69442856b1a5a9ffebb196d65147d5a45f00486364d4042b47abce0"}, "06_wc/test.py#chunk-8": {"doc_hash": "f2f616e98fc643c32319f342e0cb36038e6da4d6cd86fccb78f9f6678e243de5"}, "06_wc/test.py#chunk-9": {"doc_hash": "1af8ff54672e7ca436df9ebc958fe5b5241e308c15539c812dd2f4543c7ad27d"}, "06_wc/test.py#chunk-10": {"doc_hash": "1660f44086f952e11108a45f04dc1868bfecbdbcc68340ae66bf1c1b1497b3a4"}, "06_wc/test.py#chunk-11": {"doc_hash": "965aa6fec23a7992b089065363cf1743ff77795ddc8c1df21d68c2c3d5cb2734"}, "06_wc/inputs/empty.txt#chunk-1": {"doc_hash": "cf760b2ec63ebae0874048c97c2ecd74df764dcc58623e3bebbd3915ec228c26"}, "06_wc/inputs/foo.txt#chunk-1": {"doc_hash": "7c5b9b08235aa32eb7ebbe9cc47160db5a63f736d6102c4b4852f2fa72384e2c"}, "06_wc/inputs/one.txt#chunk-1": {"doc_hash": "24c8fa00b16e404c4362880668dee81bed6f8418487d1a7408c6d31d181b9b91"}, "06_wc/inputs/two.txt#chunk-1": {"doc_hash": "05ef7bd59563e0b3527b9ca2fb7d299a774095a9708c56660ab41a15cdf9dc0e"}, "46087325-4fa7-4c2d-a667-4eee144a9050": {"doc_hash": "21ded9598ce3f2ca6f85cbec07c54dd625ef26f04a75ff292a37bed684e24610", "ref_doc_id": "06_wc/all_test.sh#chunk-1"}, "b17e2885-1702-4222-a4c6-c72eaeea72c5": {"doc_hash": "9175550f11b68726e571c26d30b8ef6ff659146c25dfc3c398e328f8fd987573", "ref_doc_id": "06_wc/README.md#chunk-1"}, "ed3a8222-6fc4-4d85-ba34-d53162e7f971": {"doc_hash": "4677c4574c0fc67fcc30b8e3fa0af09b3fe0e6cbf1be230dc26915d04d719b95", "ref_doc_id": "06_wc/README.md#chunk-2"}, "c9c7f803-2e0b-4c95-b3c5-5c03d859f073": {"doc_hash": "fcf3d2220fea1b5b3c11dc2aed9e3ce33477d18f00fea80ce57a01786c356a92", "ref_doc_id": "06_wc/README.md#chunk-3"}, "4094ac10-0ffd-43ef-b69b-3c15edec37d4": {"doc_hash": "fd65185dc722462bf04a841f71048864c3424b5dbbc5ffa519da866c0913e316", "ref_doc_id": "06_wc/solution.py#chunk-1"}, "f17078ed-fa1d-474e-ad11-b3e161dcf73b": {"doc_hash": "89c66748d91e1f8c2883fab63f9bd8f943f5f1504f9e059d325ac1bf1e43401f", "ref_doc_id": "06_wc/test.py#chunk-1"}, "3308ea0d-936b-44d9-aa5a-0a71171c66c3": {"doc_hash": "257411c6229f55f140c26c05c0fe60458f3bb6b123ed609fbd234e11c0e9b7aa", "ref_doc_id": "06_wc/test.py#chunk-2"}, "3b0fe2e0-26d3-441b-a325-b7fd6e8d8312": {"doc_hash": "e0c75309615a2b62d5d6a04ab23e271bcec3412037c1135d2f5e9f9a100ffcd5", "ref_doc_id": "06_wc/test.py#chunk-3"}, "8cd02784-1d03-4e3f-9346-15b0c6c08ea1": {"doc_hash": "6e7f1dc6387099d194b1050ae71b177d55518a5e2fb50d4d26a9ee128a752f3b", "ref_doc_id": "06_wc/test.py#chunk-4"}, "e7751a9d-4506-4dbc-a21e-2cb8acaa6cb9": {"doc_hash": "ccead21521eb4a992392f66b61d669df971394fbb5f9b27c3b2f745b8ed5eda6", "ref_doc_id": "06_wc/test.py#chunk-5"}, "ec5efb7c-1255-4539-8bd8-3ec79120b8ba": {"doc_hash": "65db21f8cde3a407af9d4bef4e335990c10b0486e737795a4e7f9a1ac2b75a7a", "ref_doc_id": "06_wc/test.py#chunk-6"}, "aecb48f1-a418-407d-8964-76a61fabf4d4": {"doc_hash": "a2ac02389f660d07ec9417b54141d42866ec9a78b86c7be00f1deb9eb7c875b9", "ref_doc_id": "06_wc/test.py#chunk-7"}, "ab139390-f95b-4e09-9626-3c8390a1a001": {"doc_hash": "7f6da20363023d31c0feae5b52b73ad3214ed5aabf6e89364c6bdc5b9944278b", "ref_doc_id": "06_wc/test.py#chunk-8"}, "b279c559-9ec4-47ec-b612-79466904a2b5": {"doc_hash": "8d6209ef2fbdfd8cf70c77b0aa64b0d6083a4597bc30da05cb326d6010e3fb26", "ref_doc_id": "06_wc/test.py#chunk-9"}, "ee5bc280-d5bd-4f2d-8e71-3e56c20aeeec": {"doc_hash": "300a196bddad19169515054e24aad2cbdb52c3e89da75b7da49ae02eccade699", "ref_doc_id": "06_wc/test.py#chunk-10"}, "f38f6e05-2cee-4bcb-b081-ab9ac1008179": {"doc_hash": "94a5d86b3b3d039575a2418ba10da3a9ff7e7b8caf6f5b6694ea830e8e29f4bd", "ref_doc_id": "06_wc/test.py#chunk-11"}, "174e4d61-ccd8-4352-9532-15ed8531534a": {"doc_hash": "3a07fa7dd3315dc8a8b4ccfa1f778c6b095ea29ca45de5bbd288297113db2a41", "ref_doc_id": "06_wc/inputs/empty.txt#chunk-1"}, "4dfaa011-86a7-4bae-90fc-94f4a6c1d909": {"doc_hash": "ff3f45e8d91b054723a2c0b39fc2e4ff1e979571ca2d048e04c2b4a4513a241c", "ref_doc_id": "06_wc/inputs/foo.txt#chunk-1"}, "b4ae5d18-b4c9-4044-ab09-b2d687d86fbc": {"doc_hash": "68211747efd5b49a2b8e7187b09eada0399eca5950ab66d71cba41f19684918d", "ref_doc_id": "06_wc/inputs/one.txt#chunk-1"}, "cfa2c9aa-004c-4e11-92dd-3c6cf924e824": {"doc_hash": "dc92839b55a25168308452f1afa626a6b1dea64e18d7aacaca390aa440c1505a", "ref_doc_id": "06_wc/inputs/two.txt#chunk-1"}}, "docstore/ref_doc_info": {"06_wc/all_test.sh#chunk-1": {"node_ids": ["46087325-4fa7-4c2d-a667-4eee144a9050"], "metadata": {"file": "06_wc/all_test.sh", "name": "all_test.sh", "description": "This bash script is designed to automate the testing process for Python solutions that mimic the functionality of the 'wc' (word count) command. It iterates through all files in the current directory that start with 'solution' and end with '.py'. For each solution file, it copies the file to 'wc.py' (presumably the target script to be tested), and then executes 'make test' to run the test suite. Finally, it prints a 'Done.' message upon completion.", "keywords": ["bash", "script", "testing", "wc", "python", "automation", "make"]}}, "06_wc/README.md#chunk-1": {"node_ids": ["b17e2885-1702-4222-a4c6-c72eaeea72c5"], "metadata": {"file": "06_wc/README.md", "name": "wc (word count)", "description": "This section provides a description of the wc (word count) project. It explains the purpose of the program, which is to implement a Python version of the Unix wc utility. The description includes details on how the program should handle input from files and standard input, and how it should format its output, including the display of lines, words, and characters.", "keywords": ["word count", "wc", "python", "implementation", "file input", "stdin", "output format"]}}, "06_wc/README.md#chunk-2": {"node_ids": ["ed3a8222-6fc4-4d85-ba34-d53162e7f971"], "metadata": {"file": "06_wc/README.md", "name": "Usage and Help", "description": "This section details how the program responds to help flags (`-h` and `--help`). It shows the expected output, including the usage message, a description of the program, and the handling of positional and optional arguments. The example demonstrates that `FILE` arguments are optional and default to standard input.", "keywords": ["help", "usage", "command line arguments", "optional arguments", "positional arguments"]}}, "06_wc/README.md#chunk-3": {"node_ids": ["c9c7f803-2e0b-4c95-b3c5-5c03d859f073"], "metadata": {"file": "06_wc/README.md", "name": "Testing", "description": "This section describes the testing process for the wc implementation. It shows an example of running the test suite using `make test`, which in turn invokes `pytest` with the `test.py` file. The output indicates that all 9 tests passed, covering existence, usage, bad files, empty files, single file, multiple files, and stdin inputs.", "keywords": ["testing", "pytest", "make test", "test suite", "test cases"]}}, "06_wc/solution.py#chunk-1": {"node_ids": ["4094ac10-0ffd-43ef-b69b-3c15edec37d4"], "metadata": {"file": "06_wc/solution.py", "name": "get_args", "description": "Parses command-line arguments. It expects one or more input files and defaults to standard input if no files are provided. The arguments are set up to handle file input in text read mode.", "keywords": ["argument parsing", "command-line arguments", "file input", "argparse"]}}, "06_wc/test.py#chunk-1": {"node_ids": ["f17078ed-fa1d-474e-ad11-b3e161dcf73b"], "metadata": {"file": "06_wc/test.py", "name": "module", "description": "The Python script contains tests for a wc (word count) utility. It imports necessary modules for file operations, subprocess management, random string generation, and regular expressions. It defines paths to the program executable and various input files used for testing.", "keywords": ["test", "wc", "subprocess", "file path"]}}, "06_wc/test.py#chunk-2": {"node_ids": ["3308ea0d-936b-44d9-aa5a-0a71171c66c3"], "metadata": {"file": "06_wc/test.py", "name": "test_exists", "description": "This test function checks if the wc.py program executable exists at the specified path.", "keywords": ["test", "executable", "exists"]}}, "06_wc/test.py#chunk-3": {"node_ids": ["3b0fe2e0-26d3-441b-a325-b7fd6e8d8312"], "metadata": {"file": "06_wc/test.py", "name": "test_usage", "description": "This test function verifies the program's usage information when the -h or --help flags are provided. It asserts that the command returns a status code of 0 and that the output contains the word 'usage' case-insensitively.", "keywords": ["test", "usage", "help", "flag"]}}, "06_wc/test.py#chunk-4": {"node_ids": ["8cd02784-1d03-4e3f-9346-15b0c6c08ea1"], "metadata": {"file": "06_wc/test.py", "name": "random_string", "description": "A helper function to generate a random string of ASCII letters and digits. The length of the string is randomly chosen between 5 and 10 characters.", "keywords": ["helper", "random", "string", "generate"]}}, "06_wc/test.py#chunk-5": {"node_ids": ["e7751a9d-4506-4dbc-a21e-2cb8acaa6cb9"], "metadata": {"file": "06_wc/test.py", "name": "test_bad_file", "description": "This test function checks the program's behavior when a non-existent file is provided as input. It generates a random file name, runs the wc.py command with this name, and asserts that the command returns a non-zero exit status and that the output message indicates a 'No such file or directory' error.", "keywords": ["test", "file not found", "error handling", "random"]}}, "06_wc/test.py#chunk-6": {"node_ids": ["ec5efb7c-1255-4539-8bd8-3ec79120b8ba"], "metadata": {"file": "06_wc/test.py", "name": "test_empty", "description": "This test function checks the output of the wc.py program when run on an empty file. It asserts that the command executes successfully (status code 0) and that the output matches the expected format for an empty file (zero counts for lines, words, and characters, followed by the file path).", "keywords": ["test", "empty file", "output validation"]}}, "06_wc/test.py#chunk-7": {"node_ids": ["aecb48f1-a418-407d-8964-76a61fabf4d4"], "metadata": {"file": "06_wc/test.py", "name": "test_one", "description": "This test function checks the output of the wc.py program when run on a file containing a single line. It asserts that the command executes successfully and that the output matches the expected line, word, and character counts for the 'one.txt' file.", "keywords": ["test", "single line", "output validation"]}}, "06_wc/test.py#chunk-8": {"node_ids": ["ab139390-f95b-4e09-9626-3c8390a1a001"], "metadata": {"file": "06_wc/test.py", "name": "test_two", "description": "This test function checks the output of the wc.py program when run on a file containing two lines. It asserts that the command executes successfully and that the output matches the expected line, word, and character counts for the 'two.txt' file.", "keywords": ["test", "two lines", "output validation"]}}, "06_wc/test.py#chunk-9": {"node_ids": ["b279c559-9ec4-47ec-b612-79466904a2b5"], "metadata": {"file": "06_wc/test.py", "name": "test_fox", "description": "This test function checks the output of the wc.py program when run on the 'fox.txt' file. It asserts that the command executes successfully and that the output matches the expected line, word, and character counts for this specific file.", "keywords": ["test", "fox.txt", "output validation"]}}, "06_wc/test.py#chunk-10": {"node_ids": ["ee5bc280-d5bd-4f2d-8e71-3e56c20aeeec"], "metadata": {"file": "06_wc/test.py", "name": "test_more", "description": "This test function checks the wc.py program's ability to process multiple files. It runs the command with both 'fox.txt' and 'sonnet-29.txt', asserting successful execution and verifying that the output includes the counts for each file as well as a 'total' line with the aggregated counts.", "keywords": ["test", "multiple files", "aggregate", "total", "output validation"]}}, "06_wc/test.py#chunk-11": {"node_ids": ["f38f6e05-2cee-4bcb-b081-ab9ac1008179"], "metadata": {"file": "06_wc/test.py", "name": "test_stdin", "description": "This test function verifies that the wc.py program can correctly process input from standard input (stdin). It redirects the content of 'fox.txt' to the program's stdin and asserts that the output matches the expected counts, with '<stdin>' indicating the input source.", "keywords": ["test", "stdin", "standard input", "redirection"]}}, "06_wc/inputs/empty.txt#chunk-1": {"node_ids": ["174e4d61-ccd8-4352-9532-15ed8531534a"], "metadata": {"file": "06_wc/inputs/empty.txt", "name": "misc", "description": "This file is intentionally empty. It serves as a placeholder or a test case for handling empty files in the workflow. It does not contain any code or configuration.", "keywords": ["empty", "placeholder", "test case"]}}, "06_wc/inputs/foo.txt#chunk-1": {"node_ids": ["4dfaa011-86a7-4bae-90fc-94f4a6c1d909"], "metadata": {"file": "06_wc/inputs/foo.txt", "name": "misc", "description": "This chunk contains the content of the foo.txt file, which includes the words 'foo', 'bar', 'baz', and 'quux'. This data is likely intended for use in a word count or text processing task.", "keywords": ["text", "content", "words", "file"]}}, "06_wc/inputs/one.txt#chunk-1": {"node_ids": ["b4ae5d18-b4c9-4044-ab09-b2d687d86fbc"], "metadata": {"file": "06_wc/inputs/one.txt", "name": "misc", "description": "This is a single line of text.", "keywords": ["text", "line"]}}, "06_wc/inputs/two.txt#chunk-1": {"node_ids": ["cfa2c9aa-004c-4e11-92dd-3c6cf924e824"], "metadata": {"file": "06_wc/inputs/two.txt", "name": "misc", "description": "This chunk contains the text 'a' and 'b'. It appears to be a simple data input for a process.", "keywords": ["text", "data", "input"]}}}, "docstore/data": {"46087325-4fa7-4c2d-a667-4eee144a9050": {"__data__": {"id_": "46087325-4fa7-4c2d-a667-4eee144a9050", "embedding": null, "metadata": {"file": "06_wc/all_test.sh", "name": "all_test.sh", "description": "This bash script is designed to automate the testing process for Python solutions that mimic the functionality of the 'wc' (word count) command. It iterates through all files in the current directory that start with 'solution' and end with '.py'. For each solution file, it copies the file to 'wc.py' (presumably the target script to be tested), and then executes 'make test' to run the test suite. Finally, it prints a 'Done.' message upon completion.", "keywords": ["bash", "script", "testing", "wc", "python", "automation", "make"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/all_test.sh#chunk-1", "node_type": "4", "metadata": {"file": "06_wc/all_test.sh", "name": "all_test.sh", "description": "This bash script is designed to automate the testing process for Python solutions that mimic the functionality of the 'wc' (word count) command. It iterates through all files in the current directory that start with 'solution' and end with '.py'. For each solution file, it copies the file to 'wc.py' (presumably the target script to be tested), and then executes 'make test' to run the test suite. Finally, it prints a 'Done.' message upon completion.", "keywords": ["bash", "script", "testing", "wc", "python", "automation", "make"]}, "hash": "921180ebc12a4122f243e6913550a27db56cfb1a508e2bd5fa4731558173e72b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "#!/usr/bin/env bash\n\nset -eu -o pipefail\n\nPRG=\"wc.py\"\nfor FILE in solution*.py; do\n    echo \"==> ${FILE} <==\" \n    cp \"$FILE\" \"$PRG\"\n    make test\ndone\n\necho \"Done.\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 165, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b17e2885-1702-4222-a4c6-c72eaeea72c5": {"__data__": {"id_": "b17e2885-1702-4222-a4c6-c72eaeea72c5", "embedding": null, "metadata": {"file": "06_wc/README.md", "name": "wc (word count)", "description": "This section provides a description of the wc (word count) project. It explains the purpose of the program, which is to implement a Python version of the Unix wc utility. The description includes details on how the program should handle input from files and standard input, and how it should format its output, including the display of lines, words, and characters.", "keywords": ["word count", "wc", "python", "implementation", "file input", "stdin", "output format"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/README.md#chunk-1", "node_type": "4", "metadata": {"file": "06_wc/README.md", "name": "wc (word count)", "description": "This section provides a description of the wc (word count) project. It explains the purpose of the program, which is to implement a Python version of the Unix wc utility. The description includes details on how the program should handle input from files and standard input, and how it should format its output, including the display of lines, words, and characters.", "keywords": ["word count", "wc", "python", "implementation", "file input", "stdin", "output format"]}, "hash": "c07aae8be9b55adea25d55903645cb571926cad1fdfc3becfc804afb7d861d69", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "# wc (word count)\n\nhttps://www.youtube.com/playlist?list=PLhOuww6rJJNOGPw5Mu5FyhnumZjb9F6kk\n\nWrite a Python implementation of `wc` (word count).\nThe program should print lines, words, and characters for each input.\nFiles are acceptable arguments:\n\n```\n$ ./wc.py ../inputs/fox.txt\n       1       9      45 ../inputs/fox.txt\n```\n\nAs is \"standard in\" (`STDIN`) if given no arguments:\n\n```\n$ cat ../inputs/fox.txt | ./wc.py\n       1       9      45 <stdin>\n```\n\nIf given more than one file, also include a summary for each column:\n\n```\n$ ./wc.py ../inputs/*.txt\n    1000    1000    5840 ../inputs/1000.txt\n     100     100     657 ../inputs/1945-boys.txt\n     100     100     684 ../inputs/1945-girls.txt\n     865    7620   44841 ../inputs/const.txt\n    2476    7436   41743 ../inputs/dickinson.txt\n       1       9      45 ../inputs/fox.txt\n      25     278    1476 ../inputs/gettysburg.txt\n      37      91     499 ../inputs/issa.txt\n       9      51     248 ../inputs/nobody.txt\n       1      16      66 ../inputs/now.txt\n       2       9      41 ../inputs/out.txt\n       6      71     413 ../inputs/preamble.txt\n    7035   68061  396320 ../inputs/scarlet.txt\n      17     118     661 ../inputs/sonnet-29.txt\n    2618   17668   95690 ../inputs/sonnets.txt\n       3       7      45 ../inputs/spiders.txt\n       9      34     192 ../inputs/the-bustle.txt\n   37842   48990  369949 ../inputs/uscities.txt\n     176    1340    8685 ../inputs/usdeclar.txt\n   52322  152999  968095 total\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1482, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ed3a8222-6fc4-4d85-ba34-d53162e7f971": {"__data__": {"id_": "ed3a8222-6fc4-4d85-ba34-d53162e7f971", "embedding": null, "metadata": {"file": "06_wc/README.md", "name": "Usage and Help", "description": "This section details how the program responds to help flags (`-h` and `--help`). It shows the expected output, including the usage message, a description of the program, and the handling of positional and optional arguments. The example demonstrates that `FILE` arguments are optional and default to standard input.", "keywords": ["help", "usage", "command line arguments", "optional arguments", "positional arguments"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/README.md#chunk-2", "node_type": "4", "metadata": {"file": "06_wc/README.md", "name": "Usage and Help", "description": "This section details how the program responds to help flags (`-h` and `--help`). It shows the expected output, including the usage message, a description of the program, and the handling of positional and optional arguments. The example demonstrates that `FILE` arguments are optional and default to standard input.", "keywords": ["help", "usage", "command line arguments", "optional arguments", "positional arguments"]}, "hash": "0aa4f92846cc3c007bdaac5ce6ad9284930419313eae607c02dd5fbaaf911f82", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The program should respond to `-h` and `--help` with a usage:\n\n```\n$ ./wc.py -h\nusage: wc.py [-h] [FILE [FILE ...]]\n\nEmulate wc (word count)\n\npositional arguments:\n  FILE        Input file(s) (default: [<_io.TextIOWrapper name='<stdin>' \n              mode='r' encoding='UTF-8'>])\n\noptional arguments:\n  -h, --help  show this help message and exit\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 351, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c9c7f803-2e0b-4c95-b3c5-5c03d859f073": {"__data__": {"id_": "c9c7f803-2e0b-4c95-b3c5-5c03d859f073", "embedding": null, "metadata": {"file": "06_wc/README.md", "name": "Testing", "description": "This section describes the testing process for the wc implementation. It shows an example of running the test suite using `make test`, which in turn invokes `pytest` with the `test.py` file. The output indicates that all 9 tests passed, covering existence, usage, bad files, empty files, single file, multiple files, and stdin inputs.", "keywords": ["testing", "pytest", "make test", "test suite", "test cases"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/README.md#chunk-3", "node_type": "4", "metadata": {"file": "06_wc/README.md", "name": "Testing", "description": "This section describes the testing process for the wc implementation. It shows an example of running the test suite using `make test`, which in turn invokes `pytest` with the `test.py` file. The output indicates that all 9 tests passed, covering existence, usage, bad files, empty files, single file, multiple files, and stdin inputs.", "keywords": ["testing", "pytest", "make test", "test suite", "test cases"]}, "hash": "869d5abcb341ec432eeaf259fc51a126590628de504b7426bea5c1f0f9fb08ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Run the test suite to ensure your program is working correctly.\n\n```\n$ make test\npytest -xv test.py\n============================= test session starts ==============================\n... \ncollected 9 items\n\ntest.py::test_exists PASSED                                              [ 11%]\ntest.py::test_usage PASSED                                               [ 22%]\ntest.py::test_bad_file PASSED                                            [ 33%]\ntest.py::test_empty PASSED                                               [ 44%]\ntest.py::test_one PASSED                                                 [ 55%]\ntest.py::test_two PASSED                                                 [ 66%]\ntest.py::test_fox PASSED                                                 [ 77%]\ntest.py::test_more PASSED                                                [ 88%]\ntest.py::test_stdin PASSED                                               [100%]\n\n============================== 9 passed in 0.54s ===============================\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1010, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4094ac10-0ffd-43ef-b69b-3c15edec37d4": {"__data__": {"id_": "4094ac10-0ffd-43ef-b69b-3c15edec37d4", "embedding": null, "metadata": {"file": "06_wc/solution.py", "name": "get_args", "description": "Parses command-line arguments. It expects one or more input files and defaults to standard input if no files are provided. The arguments are set up to handle file input in text read mode.", "keywords": ["argument parsing", "command-line arguments", "file input", "argparse"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/solution.py#chunk-1", "node_type": "4", "metadata": {"file": "06_wc/solution.py", "name": "get_args", "description": "Parses command-line arguments. It expects one or more input files and defaults to standard input if no files are provided. The arguments are set up to handle file input in text read mode.", "keywords": ["argument parsing", "command-line arguments", "file input", "argparse"]}, "hash": "8ae75fdd9dc00db06b7e822ed863dff06eb67fed1679b7a0a5331c399d1b8928", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "import argparse\nimport sys\n\n\ndef get_args():\n    \"\"\"Get command-line arguments\"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Emulate wc (word count)',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('file',\n                        metavar='FILE',\n                        nargs='*', \n                        default=[sys.stdin],\n                        type=argparse.FileType('rt'),\n                        help='Input file(s)')\n\n    return parser.parse_args()", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 517, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f17078ed-fa1d-474e-ad11-b3e161dcf73b": {"__data__": {"id_": "f17078ed-fa1d-474e-ad11-b3e161dcf73b", "embedding": null, "metadata": {"file": "06_wc/test.py", "name": "module", "description": "The Python script contains tests for a wc (word count) utility. It imports necessary modules for file operations, subprocess management, random string generation, and regular expressions. It defines paths to the program executable and various input files used for testing.", "keywords": ["test", "wc", "subprocess", "file path"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/test.py#chunk-1", "node_type": "4", "metadata": {"file": "06_wc/test.py", "name": "module", "description": "The Python script contains tests for a wc (word count) utility. It imports necessary modules for file operations, subprocess management, random string generation, and regular expressions. It defines paths to the program executable and various input files used for testing.", "keywords": ["test", "wc", "subprocess", "file path"]}, "hash": "459eb87ec900172169d88127136803bfada88dff241b644e819245480957255f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "#!/usr/bin/env python3\n\"\"\"tests for wc.py\"\"\"\n\nimport os\nimport random\nimport re\nimport string\nfrom subprocess import getstatusoutput\n\nprg = './wc.py'\nempty = './inputs/empty.txt'\none_line = './inputs/one.txt'\ntwo_lines = './inputs/two.txt'\nfox = '../inputs/fox.txt'\nsonnet = '../inputs/sonnet-29.txt'", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 300, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3308ea0d-936b-44d9-aa5a-0a71171c66c3": {"__data__": {"id_": "3308ea0d-936b-44d9-aa5a-0a71171c66c3", "embedding": null, "metadata": {"file": "06_wc/test.py", "name": "test_exists", "description": "This test function checks if the wc.py program executable exists at the specified path.", "keywords": ["test", "executable", "exists"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/test.py#chunk-2", "node_type": "4", "metadata": {"file": "06_wc/test.py", "name": "test_exists", "description": "This test function checks if the wc.py program executable exists at the specified path.", "keywords": ["test", "executable", "exists"]}, "hash": "ad8bd1a79e496aa81d6c14ea32fc12589f10ea12120b00c21f47f7c5b27c3389", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "def test_exists():\n    \"\"\"exists\"\"\"\n\n    assert os.path.isfile(prg)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 67, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3b0fe2e0-26d3-441b-a325-b7fd6e8d8312": {"__data__": {"id_": "3b0fe2e0-26d3-441b-a325-b7fd6e8d8312", "embedding": null, "metadata": {"file": "06_wc/test.py", "name": "test_usage", "description": "This test function verifies the program's usage information when the -h or --help flags are provided. It asserts that the command returns a status code of 0 and that the output contains the word 'usage' case-insensitively.", "keywords": ["test", "usage", "help", "flag"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/test.py#chunk-3", "node_type": "4", "metadata": {"file": "06_wc/test.py", "name": "test_usage", "description": "This test function verifies the program's usage information when the -h or --help flags are provided. It asserts that the command returns a status code of 0 and that the output contains the word 'usage' case-insensitively.", "keywords": ["test", "usage", "help", "flag"]}, "hash": "e63ad538abb48cbadda04054e076689fc1ef5b1171ba4d3c82efcdfc7084ebaf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "def test_usage():\n    \"\"\"usage\"\"\"\n\n    for flag in ['-h', '--help']:\n        rv, out = getstatusoutput(f'{prg} {flag}')\n        assert rv == 0\n        assert re.match(\"usage\", out, re.IGNORECASE)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 195, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8cd02784-1d03-4e3f-9346-15b0c6c08ea1": {"__data__": {"id_": "8cd02784-1d03-4e3f-9346-15b0c6c08ea1", "embedding": null, "metadata": {"file": "06_wc/test.py", "name": "random_string", "description": "A helper function to generate a random string of ASCII letters and digits. The length of the string is randomly chosen between 5 and 10 characters.", "keywords": ["helper", "random", "string", "generate"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/test.py#chunk-4", "node_type": "4", "metadata": {"file": "06_wc/test.py", "name": "random_string", "description": "A helper function to generate a random string of ASCII letters and digits. The length of the string is randomly chosen between 5 and 10 characters.", "keywords": ["helper", "random", "string", "generate"]}, "hash": "027e1536bf250c5559edd1fd9627acd62cbc9045d02488a5a9bc5ec0beaf398b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "def random_string():\n    \"\"\"generate a random string\"\"\"\n\n    k = random.randint(5, 10)\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=k))", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 164, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e7751a9d-4506-4dbc-a21e-2cb8acaa6cb9": {"__data__": {"id_": "e7751a9d-4506-4dbc-a21e-2cb8acaa6cb9", "embedding": null, "metadata": {"file": "06_wc/test.py", "name": "test_bad_file", "description": "This test function checks the program's behavior when a non-existent file is provided as input. It generates a random file name, runs the wc.py command with this name, and asserts that the command returns a non-zero exit status and that the output message indicates a 'No such file or directory' error.", "keywords": ["test", "file not found", "error handling", "random"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/test.py#chunk-5", "node_type": "4", "metadata": {"file": "06_wc/test.py", "name": "test_bad_file", "description": "This test function checks the program's behavior when a non-existent file is provided as input. It generates a random file name, runs the wc.py command with this name, and asserts that the command returns a non-zero exit status and that the output message indicates a 'No such file or directory' error.", "keywords": ["test", "file not found", "error handling", "random"]}, "hash": "b6db4dca0ee953d2acec74e2d4194c0b317b338d7878a7c2d26618b2a2e83f18", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "def test_bad_file():\n    \"\"\"bad_file\"\"\"\n\n    bad = random_string()\n    rv, out = getstatusoutput(f'{prg} {bad}')\n    assert rv != 0\n    assert re.search(f\"No such file or directory: '{bad}'\", out)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 196, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ec5efb7c-1255-4539-8bd8-3ec79120b8ba": {"__data__": {"id_": "ec5efb7c-1255-4539-8bd8-3ec79120b8ba", "embedding": null, "metadata": {"file": "06_wc/test.py", "name": "test_empty", "description": "This test function checks the output of the wc.py program when run on an empty file. It asserts that the command executes successfully (status code 0) and that the output matches the expected format for an empty file (zero counts for lines, words, and characters, followed by the file path).", "keywords": ["test", "empty file", "output validation"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/test.py#chunk-6", "node_type": "4", "metadata": {"file": "06_wc/test.py", "name": "test_empty", "description": "This test function checks the output of the wc.py program when run on an empty file. It asserts that the command executes successfully (status code 0) and that the output matches the expected format for an empty file (zero counts for lines, words, and characters, followed by the file path).", "keywords": ["test", "empty file", "output validation"]}, "hash": "7a09e2160598050dce062cde20bb126ae406c85793300a5f5c07575b7e9fb783", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "def test_empty():\n    \"\"\"Test on empty\"\"\"\n\n    rv, out = getstatusoutput(f'{prg} {empty}')\n    assert rv == 0\n    assert out.rstrip() == '       0       0       0 ./inputs/empty.txt'", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 182, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aecb48f1-a418-407d-8964-76a61fabf4d4": {"__data__": {"id_": "aecb48f1-a418-407d-8964-76a61fabf4d4", "embedding": null, "metadata": {"file": "06_wc/test.py", "name": "test_one", "description": "This test function checks the output of the wc.py program when run on a file containing a single line. It asserts that the command executes successfully and that the output matches the expected line, word, and character counts for the 'one.txt' file.", "keywords": ["test", "single line", "output validation"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/test.py#chunk-7", "node_type": "4", "metadata": {"file": "06_wc/test.py", "name": "test_one", "description": "This test function checks the output of the wc.py program when run on a file containing a single line. It asserts that the command executes successfully and that the output matches the expected line, word, and character counts for the 'one.txt' file.", "keywords": ["test", "single line", "output validation"]}, "hash": "e729e3feb69442856b1a5a9ffebb196d65147d5a45f00486364d4042b47abce0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "def test_one():\n    \"\"\"Test on one\"\"\"\n\n    rv, out = getstatusoutput(f'{prg} {one_line}')\n    assert rv == 0\n    assert out.rstrip() == '       1       1       2 ./inputs/one.txt'", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 179, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab139390-f95b-4e09-9626-3c8390a1a001": {"__data__": {"id_": "ab139390-f95b-4e09-9626-3c8390a1a001", "embedding": null, "metadata": {"file": "06_wc/test.py", "name": "test_two", "description": "This test function checks the output of the wc.py program when run on a file containing two lines. It asserts that the command executes successfully and that the output matches the expected line, word, and character counts for the 'two.txt' file.", "keywords": ["test", "two lines", "output validation"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/test.py#chunk-8", "node_type": "4", "metadata": {"file": "06_wc/test.py", "name": "test_two", "description": "This test function checks the output of the wc.py program when run on a file containing two lines. It asserts that the command executes successfully and that the output matches the expected line, word, and character counts for the 'two.txt' file.", "keywords": ["test", "two lines", "output validation"]}, "hash": "f2f616e98fc643c32319f342e0cb36038e6da4d6cd86fccb78f9f6678e243de5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "def test_two():\n    \"\"\"Test on two\"\"\"\n\n    rv, out = getstatusoutput(f'{prg} {two_lines}')\n    assert rv == 0\n    assert out.rstrip() == '       2       2       4 ./inputs/two.txt'", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 180, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b279c559-9ec4-47ec-b612-79466904a2b5": {"__data__": {"id_": "b279c559-9ec4-47ec-b612-79466904a2b5", "embedding": null, "metadata": {"file": "06_wc/test.py", "name": "test_fox", "description": "This test function checks the output of the wc.py program when run on the 'fox.txt' file. It asserts that the command executes successfully and that the output matches the expected line, word, and character counts for this specific file.", "keywords": ["test", "fox.txt", "output validation"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/test.py#chunk-9", "node_type": "4", "metadata": {"file": "06_wc/test.py", "name": "test_fox", "description": "This test function checks the output of the wc.py program when run on the 'fox.txt' file. It asserts that the command executes successfully and that the output matches the expected line, word, and character counts for this specific file.", "keywords": ["test", "fox.txt", "output validation"]}, "hash": "1af8ff54672e7ca436df9ebc958fe5b5241e308c15539c812dd2f4543c7ad27d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "def test_fox():\n    \"\"\"Test on fox\"\"\"\n\n    rv, out = getstatusoutput(f'{prg} {fox}')\n    assert rv == 0\n    assert out.rstrip() == '       1       9      45 ../inputs/fox.txt'", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 175, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ee5bc280-d5bd-4f2d-8e71-3e56c20aeeec": {"__data__": {"id_": "ee5bc280-d5bd-4f2d-8e71-3e56c20aeeec", "embedding": null, "metadata": {"file": "06_wc/test.py", "name": "test_more", "description": "This test function checks the wc.py program's ability to process multiple files. It runs the command with both 'fox.txt' and 'sonnet-29.txt', asserting successful execution and verifying that the output includes the counts for each file as well as a 'total' line with the aggregated counts.", "keywords": ["test", "multiple files", "aggregate", "total", "output validation"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/test.py#chunk-10", "node_type": "4", "metadata": {"file": "06_wc/test.py", "name": "test_more", "description": "This test function checks the wc.py program's ability to process multiple files. It runs the command with both 'fox.txt' and 'sonnet-29.txt', asserting successful execution and verifying that the output includes the counts for each file as well as a 'total' line with the aggregated counts.", "keywords": ["test", "multiple files", "aggregate", "total", "output validation"]}, "hash": "1660f44086f952e11108a45f04dc1868bfecbdbcc68340ae66bf1c1b1497b3a4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "def test_more():\n    \"\"\"Test on more than one file\"\"\"\n\n    rv, out = getstatusoutput(f'{prg} {fox} {sonnet}')\n    expected = ('       1       9      45 ../inputs/fox.txt\\n'\n                '      17     118     661 ../inputs/sonnet-29.txt\\n'\n                '      18     127     706 total')\n    assert rv == 0\n    assert out.rstrip() == expected", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 346, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f38f6e05-2cee-4bcb-b081-ab9ac1008179": {"__data__": {"id_": "f38f6e05-2cee-4bcb-b081-ab9ac1008179", "embedding": null, "metadata": {"file": "06_wc/test.py", "name": "test_stdin", "description": "This test function verifies that the wc.py program can correctly process input from standard input (stdin). It redirects the content of 'fox.txt' to the program's stdin and asserts that the output matches the expected counts, with '<stdin>' indicating the input source.", "keywords": ["test", "stdin", "standard input", "redirection"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/test.py#chunk-11", "node_type": "4", "metadata": {"file": "06_wc/test.py", "name": "test_stdin", "description": "This test function verifies that the wc.py program can correctly process input from standard input (stdin). It redirects the content of 'fox.txt' to the program's stdin and asserts that the output matches the expected counts, with '<stdin>' indicating the input source.", "keywords": ["test", "stdin", "standard input", "redirection"]}, "hash": "965aa6fec23a7992b089065363cf1743ff77795ddc8c1df21d68c2c3d5cb2734", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "def test_stdin():\n    \"\"\"Test on stdin\"\"\"\n\n    rv, out = getstatusoutput(f'{prg} < {fox}')\n    assert rv == 0\n    assert out.rstrip() == '       1       9      45 <stdin>'", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 171, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "174e4d61-ccd8-4352-9532-15ed8531534a": {"__data__": {"id_": "174e4d61-ccd8-4352-9532-15ed8531534a", "embedding": null, "metadata": {"file": "06_wc/inputs/empty.txt", "name": "misc", "description": "This file is intentionally empty. It serves as a placeholder or a test case for handling empty files in the workflow. It does not contain any code or configuration.", "keywords": ["empty", "placeholder", "test case"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/inputs/empty.txt#chunk-1", "node_type": "4", "metadata": {"file": "06_wc/inputs/empty.txt", "name": "misc", "description": "This file is intentionally empty. It serves as a placeholder or a test case for handling empty files in the workflow. It does not contain any code or configuration.", "keywords": ["empty", "placeholder", "test case"]}, "hash": "cf760b2ec63ebae0874048c97c2ecd74df764dcc58623e3bebbd3915ec228c26", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4dfaa011-86a7-4bae-90fc-94f4a6c1d909": {"__data__": {"id_": "4dfaa011-86a7-4bae-90fc-94f4a6c1d909", "embedding": null, "metadata": {"file": "06_wc/inputs/foo.txt", "name": "misc", "description": "This chunk contains the content of the foo.txt file, which includes the words 'foo', 'bar', 'baz', and 'quux'. This data is likely intended for use in a word count or text processing task.", "keywords": ["text", "content", "words", "file"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/inputs/foo.txt#chunk-1", "node_type": "4", "metadata": {"file": "06_wc/inputs/foo.txt", "name": "misc", "description": "This chunk contains the content of the foo.txt file, which includes the words 'foo', 'bar', 'baz', and 'quux'. This data is likely intended for use in a word count or text processing task.", "keywords": ["text", "content", "words", "file"]}, "hash": "7c5b9b08235aa32eb7ebbe9cc47160db5a63f736d6102c4b4852f2fa72384e2c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "foo\nbar baz\nquux", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 16, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b4ae5d18-b4c9-4044-ab09-b2d687d86fbc": {"__data__": {"id_": "b4ae5d18-b4c9-4044-ab09-b2d687d86fbc", "embedding": null, "metadata": {"file": "06_wc/inputs/one.txt", "name": "misc", "description": "This is a single line of text.", "keywords": ["text", "line"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/inputs/one.txt#chunk-1", "node_type": "4", "metadata": {"file": "06_wc/inputs/one.txt", "name": "misc", "description": "This is a single line of text.", "keywords": ["text", "line"]}, "hash": "24c8fa00b16e404c4362880668dee81bed6f8418487d1a7408c6d31d181b9b91", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cfa2c9aa-004c-4e11-92dd-3c6cf924e824": {"__data__": {"id_": "cfa2c9aa-004c-4e11-92dd-3c6cf924e824", "embedding": null, "metadata": {"file": "06_wc/inputs/two.txt", "name": "misc", "description": "This chunk contains the text 'a' and 'b'. It appears to be a simple data input for a process.", "keywords": ["text", "data", "input"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06_wc/inputs/two.txt#chunk-1", "node_type": "4", "metadata": {"file": "06_wc/inputs/two.txt", "name": "misc", "description": "This chunk contains the text 'a' and 'b'. It appears to be a simple data input for a process.", "keywords": ["text", "data", "input"]}, "hash": "05ef7bd59563e0b3527b9ca2fb7d299a774095a9708c56660ab41a15cdf9dc0e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "a\nb", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}}