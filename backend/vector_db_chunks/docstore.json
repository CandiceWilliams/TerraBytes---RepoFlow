{"docstore/metadata": {"03_picnic/all_test.sh#chunk-1": {"doc_hash": "d275db69719f454405d6bdde986be5c484996dda1c1edb3a762b8521c6007bcc"}, "03_picnic/README.md#chunk-1": {"doc_hash": "8425af65f78ee8fd79ea5d1176069511e1a34508508980db4181201bb7d6e2b1"}, "03_picnic/solution.py#chunk-1": {"doc_hash": "ff5832fd8f0e637b71ed2bea09be232b9ed77ffdc394d0b327d5cd505ec93794"}, "030d375a-dbfb-463b-bdee-4078f5573aa9": {"doc_hash": "2e59cbb26d539441ffbeb46dd235f5ccc7bdc9c0a687c6fcc9cc37723c928439", "ref_doc_id": "03_picnic/all_test.sh#chunk-1"}, "1bf2019c-c6fb-465b-a330-028f8aa802ca": {"doc_hash": "0f18873ba0557123fc652e8c13a477abbb1a6c78c595090022bd8513403e9070", "ref_doc_id": "03_picnic/README.md#chunk-1"}, "f7ee571c-46c9-4e9a-93eb-cefa4ec57be0": {"doc_hash": "ac3d35657c6ac7c76f94c76695c44ebbf0c6a35ef6905d3b2ea11fcf6c40dc84", "ref_doc_id": "03_picnic/solution.py#chunk-1"}}, "docstore/ref_doc_info": {"03_picnic/all_test.sh#chunk-1": {"node_ids": ["030d375a-dbfb-463b-bdee-4078f5573aa9"], "metadata": {"file": "03_picnic/all_test.sh", "name": "all_test.sh", "description": "This script is designed to automate the testing process for Python solution files related to the 'picnic' project. It iterates through all files starting with 'solution' in the current directory. For each solution file, it copies the file to a target script named 'picnic.py', then executes 'make test' to run the tests. Finally, it prints a 'Done.' message after all solution files have been processed.", "keywords": ["bash", "script", "testing", "automation", "python", "picnic", "make"]}}, "03_picnic/README.md#chunk-1": {"node_ids": ["1bf2019c-c6fb-465b-a330-028f8aa802ca"], "metadata": {"file": "03_picnic/README.md", "name": "Picnic Program Description", "description": "This document describes a Python program designed to format a list of items for a picnic. It outlines the expected output for different numbers of items (one, two, or three or more) and demonstrates the functionality of a `--sorted` flag for alphabetically ordering the items. It also includes examples of how the program handles no input and help requests (`-h`, `--help`). Finally, it shows how to run the test suite using `make test`.", "keywords": ["picnic", "formatting", "command-line", "python", "sorting", "testing"]}}, "03_picnic/solution.py#chunk-1": {"node_ids": ["f7ee571c-46c9-4e9a-93eb-cefa4ec57be0"], "metadata": {"file": "03_picnic/solution.py", "name": "get_args", "description": "This function sets up and parses command-line arguments for the picnic game. It defines an argument for items to bring (which can be one or more) and an optional flag to sort the items before displaying them.", "keywords": ["argparse", "command-line arguments", "get_args", "parser"]}}}, "docstore/data": {"030d375a-dbfb-463b-bdee-4078f5573aa9": {"__data__": {"id_": "030d375a-dbfb-463b-bdee-4078f5573aa9", "embedding": null, "metadata": {"file": "03_picnic/all_test.sh", "name": "all_test.sh", "description": "This script is designed to automate the testing process for Python solution files related to the 'picnic' project. It iterates through all files starting with 'solution' in the current directory. For each solution file, it copies the file to a target script named 'picnic.py', then executes 'make test' to run the tests. Finally, it prints a 'Done.' message after all solution files have been processed.", "keywords": ["bash", "script", "testing", "automation", "python", "picnic", "make"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "03_picnic/all_test.sh#chunk-1", "node_type": "4", "metadata": {"file": "03_picnic/all_test.sh", "name": "all_test.sh", "description": "This script is designed to automate the testing process for Python solution files related to the 'picnic' project. It iterates through all files starting with 'solution' in the current directory. For each solution file, it copies the file to a target script named 'picnic.py', then executes 'make test' to run the tests. Finally, it prints a 'Done.' message after all solution files have been processed.", "keywords": ["bash", "script", "testing", "automation", "python", "picnic", "make"]}, "hash": "d275db69719f454405d6bdde986be5c484996dda1c1edb3a762b8521c6007bcc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "#!/usr/bin/env bash\n\nset -eu -o pipefail\n\nPRG=\"picnic.py\"\nfor FILE in solution*.py; do\n    echo \"==> ${FILE} <==\" \n    cp \"$FILE\" \"$PRG\"\n    make test\ndone\n\necho \"Done.\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 169, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1bf2019c-c6fb-465b-a330-028f8aa802ca": {"__data__": {"id_": "1bf2019c-c6fb-465b-a330-028f8aa802ca", "embedding": null, "metadata": {"file": "03_picnic/README.md", "name": "Picnic Program Description", "description": "This document describes a Python program designed to format a list of items for a picnic. It outlines the expected output for different numbers of items (one, two, or three or more) and demonstrates the functionality of a `--sorted` flag for alphabetically ordering the items. It also includes examples of how the program handles no input and help requests (`-h`, `--help`). Finally, it shows how to run the test suite using `make test`.", "keywords": ["picnic", "formatting", "command-line", "python", "sorting", "testing"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "03_picnic/README.md#chunk-1", "node_type": "4", "metadata": {"file": "03_picnic/README.md", "name": "Picnic Program Description", "description": "This document describes a Python program designed to format a list of items for a picnic. It outlines the expected output for different numbers of items (one, two, or three or more) and demonstrates the functionality of a `--sorted` flag for alphabetically ordering the items. It also includes examples of how the program handles no input and help requests (`-h`, `--help`). Finally, it shows how to run the test suite using `make test`.", "keywords": ["picnic", "formatting", "command-line", "python", "sorting", "testing"]}, "hash": "8425af65f78ee8fd79ea5d1176069511e1a34508508980db4181201bb7d6e2b1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "# Picnic\n\nhttps://www.youtube.com/playlist?list=PLhOuww6rJJNMuQohHrNxRjhFTR9UlUOIa\n\nWrite a program that will correctly format the items we're taking on our picnic.\nFor one item, it should print the one item:\n\n```\n$ ./picnic.py sandwiches\nYou are bringing sandwiches.\n```\n\nFor two items, place \"and\" in between:\n\n```\n$ ./picnic.py sandwiches chips\nYou are bringing sandwiches and chips.\n```\n\nFor three or more items, use commas and \"and\":\n\n```\n$ ./picnic.py sandwiches chips cake\nYou are bringing sandwiches, chips, and cake.\n```\n\nIf the `--sorted` flag is present, the items should first be sorted:\n\n```\n$ ./picnic.py sandwiches chips cake --sorted\nYou are bringing cake, chips, and sandwiches.\n```\n\nIf no items are given, print a brief usage:\n\n```\n$ ./picnic.py\nusage: picnic.py [-h] [-s] str [str ...]\npicnic.py: error: the following arguments are required: str\n```\n\nRespond to `-h` and `--help` with a longer usage:\n\n```\n$ ./picnic.py -h\nusage: picnic.py [-h] [-s] str [str ...]\n\nPicnic game\n\npositional arguments:\n  str           Item(s) to bring\n\noptional arguments:\n  -h, --help    show this help message and exit\n  -s, --sorted  Sort the items (default: False)\n```\n\nRun the test suite to ensure your program is correct:\n\n```\n$ make test\npytest -xv test.py\n============================= test session starts ==============================\n...\ncollected 7 items\n\ntest.py::test_exists PASSED                                              [ 14%]\ntest.py::test_usage PASSED                                               [ 28%]\ntest.py::test_one PASSED                                                 [ 42%]\ntest.py::test_two PASSED                                                 [ 57%]\ntest.py::test_more_than_two PASSED                                       [ 71%]\ntest.py::test_two_sorted PASSED                                          [ 85%]\ntest.py::test_more_than_two_sorted PASSED                                [100%]\n\n============================== 7 passed in 0.51s ===============================\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2013, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f7ee571c-46c9-4e9a-93eb-cefa4ec57be0": {"__data__": {"id_": "f7ee571c-46c9-4e9a-93eb-cefa4ec57be0", "embedding": null, "metadata": {"file": "03_picnic/solution.py", "name": "get_args", "description": "This function sets up and parses command-line arguments for the picnic game. It defines an argument for items to bring (which can be one or more) and an optional flag to sort the items before displaying them.", "keywords": ["argparse", "command-line arguments", "get_args", "parser"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "03_picnic/solution.py#chunk-1", "node_type": "4", "metadata": {"file": "03_picnic/solution.py", "name": "get_args", "description": "This function sets up and parses command-line arguments for the picnic game. It defines an argument for items to bring (which can be one or more) and an optional flag to sort the items before displaying them.", "keywords": ["argparse", "command-line arguments", "get_args", "parser"]}, "hash": "ff5832fd8f0e637b71ed2bea09be232b9ed77ffdc394d0b327d5cd505ec93794", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "import argparse\n\n\n# --------------------------------------------------\ndef get_args():\n    \"\"\"Get command-line arguments\"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Picnic game',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('item',\n                        metavar='str',\n                        nargs='+',\n                        help='Item(s) to bring')\n\n    parser.add_argument('-s',\n                        '--sorted',\n                        action='store_true',\n                        help='Sort the items')\n\n    return parser.parse_args()", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 608, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}}