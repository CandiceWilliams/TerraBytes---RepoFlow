[
  {
    "name": "Project Configuration",
    "description": "Core project configuration files, including the main README, license, dependencies, and scripts to run all tests.",
    "fileStructure": [
      "requirements.txt",
      "LICENSE",
      "README.md",
      ".gitignore",
      "all_test.sh",
      "Makefile"
    ],
    "returnPrompt": "Analyze the root project configuration.",
    "assumptions": "This workspace groups the global files that define the project, its dependencies, and overall test execution, separate from any single chapter."
  },
  {
    "name": "Chapter Scaffolding",
    "description": "A utility script and template for bootstrapping new chapters, ensuring a consistent project structure.",
    "fileStructure": [
      "bin/new.py",
      "template/template.py"
    ],
    "returnPrompt": "Analyze the chapter scaffolding tool.",
    "assumptions": "This workspace contains the tooling used by the author to create new exercises for the book."
  },
  {
    "name": "Containerization",
    "description": "Configuration files for building a Docker container to provide a consistent development and testing environment.",
    "fileStructure": [
      "docker/README.md",
      "docker/Dockerfile",
      "docker/Makefile"
    ],
    "returnPrompt": "Analyze the Docker container setup.",
    "assumptions": "This workspace is dedicated to the Docker setup for environment isolation."
  },
  {
    "name": "ArgParse Examples",
    "description": "A collection of small scripts demonstrating various features of Python's `argparse` module for command-line parsing.",
    "fileStructure": [
      "appendix_argparse/cat_n_manual.py",
      "appendix_argparse/README.md",
      "appendix_argparse/nargs+.py",
      "appendix_argparse/two_args.py",
      "appendix_argparse/choices.py",
      "appendix_argparse/cat_n.py",
      "appendix_argparse/one_arg.py",
      "appendix_argparse/manual.py",
      "appendix_argparse/nargs2.py"
    ],
    "returnPrompt": "Analyze the `argparse` examples.",
    "assumptions": "This workspace isolates the supplementary examples for the `argparse` library, which are referenced by the main projects."
  },
  {
    "name": "01: Hello World",
    "description": "Introduces how to write and test a basic Python program, covering comments, main functions, and argument parsing.",
    "fileStructure": [
      "01_hello/hello04_argparse_positional.py",
      "01_hello/hello02_comment.py",
      "01_hello/test.py",
      "01_hello/README.md",
      "01_hello/hello03_shebang.py",
      "01_hello/hello06_main_function.py",
      "01_hello/hello08_formatted.py",
      "01_hello/hello07_get_args.py",
      "01_hello/hello01_print.py",
      "01_hello/Makefile",
      "01_hello/hello05_argparse_option.py"
    ],
    "returnPrompt": "Analyze the 'Hello World' project.",
    "assumptions": "This workspace represents Chapter 1 of the book, focusing on the fundamentals of a Python script."
  },
  {
    "name": "02: Crow's Nest",
    "description": "A program that accepts a single, positional argument and creates a newly formatted output string, teaching basic argument handling.",
    "fileStructure": [
      "02_crowsnest/solution.py",
      "02_crowsnest/test.py",
      "02_crowsnest/README.md",
      "02_crowsnest/all_test.sh",
      "02_crowsnest/Makefile"
    ],
    "returnPrompt": "Analyze the 'Crow's Nest' project.",
    "assumptions": "This workspace represents Chapter 2, focusing on processing a single command-line argument."
  },
  {
    "name": "03: Picnic Game",
    "description": "A program that accepts multiple string arguments and formats them into a sentence, demonstrating how to handle a variable number of inputs.",
    "fileStructure": [
      "03_picnic/solution.py",
      "03_picnic/test.py",
      "03_picnic/README.md",
      "03_picnic/all_test.sh",
      "03_picnic/Makefile"
    ],
    "returnPrompt": "Analyze the 'Picnic Game' project.",
    "assumptions": "This workspace represents Chapter 3, focusing on lists and string formatting for multiple arguments."
  },
  {
    "name": "04: Jump The Five",
    "description": "A program to encode numerals in text using the 'Jump The Five' algorithm, introducing dictionary lookups for character substitution.",
    "fileStructure": [
      "04_jump_the_five/solution5.py",
      "04_jump_the_five/solution3.py",
      "04_jump_the_five/test.py",
      "04_jump_the_five/README.md",
      "04_jump_the_five/solution1.py",
      "04_jump_the_five/solution2.py",
      "04_jump_the_five/solution4.py",
      "04_jump_the_five/all_test.sh",
      "04_jump_the_five/Makefile"
    ],
    "returnPrompt": "Analyze the 'Jump The Five' project.",
    "assumptions": "This workspace represents Chapter 4, introducing basic encryption ideas via dictionary-based character mapping."
  },
  {
    "name": "05: Howler",
    "description": "A program that processes text from either command-line arguments or a file, and writes the uppercased result to standard output or a file.",
    "fileStructure": [
      "05_howler/mk-test-out.sh",
      "05_howler/test.py",
      "05_howler/README.md",
      "05_howler/solution1.py",
      "05_howler/.gitignore",
      "05_howler/solution2.py",
      "05_howler/all_test.sh",
      "05_howler/Makefile",
      "05_howler/test-outs/sonnet-29.txt",
      "05_howler/test-outs/the-bustle.txt",
      "05_howler/test-outs/preamble.txt"
    ],
    "returnPrompt": "Analyze the 'Howler' project.",
    "assumptions": "This workspace represents Chapter 5, teaching file I/O operations and handling different input/output sources."
  },
  {
    "name": "06: Word Count",
    "description": "An implementation of the classic `wc` (word count) command-line tool, processing multiple files or standard input.",
    "fileStructure": [
      "06_wc/solution.py",
      "06_wc/test.py",
      "06_wc/README.md",
      "06_wc/all_test.sh",
      "06_wc/Makefile",
      "06_wc/inputs/two.txt",
      "06_wc/inputs/empty.txt",
      "06_wc/inputs/foo.txt",
      "06_wc/inputs/one.txt"
    ],
    "returnPrompt": "Analyze the 'Word Count' project.",
    "assumptions": "This workspace represents Chapter 6, focusing on file handling and data aggregation across multiple sources."
  },
  {
    "name": "07: Gashlycrumb",
    "description": "A program that uses an input file to build a lookup dictionary for translating command-line arguments into corresponding lines from the file.",
    "fileStructure": [
      "07_gashlycrumb/solution3_dict_get.py",
      "07_gashlycrumb/test.py",
      "07_gashlycrumb/README.md",
      "07_gashlycrumb/solution1.py",
      "07_gashlycrumb/gashlycrumb.txt",
      "07_gashlycrumb/gashlycrumb_interactive.py",
      "07_gashlycrumb/solution2_dict_comp.py",
      "07_gashlycrumb/all_test.sh",
      "07_gashlycrumb/Makefile",
      "07_gashlycrumb/alternate.txt"
    ],
    "returnPrompt": "Analyze the 'Gashlycrumb' project.",
    "assumptions": "This workspace represents Chapter 7, emphasizing building and using dictionaries from file content."
  },
  {
    "name": "08: Apples and Bananas",
    "description": "A program to find and replace vowels in text, exploring various methods from loops to list comprehensions and map functions.",
    "fileStructure": [
      "08_apples_and_bananas/solution5.1_no_closure.py",
      "08_apples_and_bananas/solution6_map_lambda.py",
      "08_apples_and_bananas/test.py",
      "08_apples_and_bananas/README.md",
      "08_apples_and_bananas/solution8_regex.py",
      "08_apples_and_bananas/solution7_map_function.py",
      "08_apples_and_bananas/solution2_str_replace.py",
      "08_apples_and_bananas/solution5_list_comp_function.py",
      "08_apples_and_bananas/solution3_str_translate.py",
      "08_apples_and_bananas/solution4_list_comprehension.py",
      "08_apples_and_bananas/solution1_iterate_chars.py",
      "08_apples_and_bananas/all_test.sh",
      "08_apples_and_bananas/Makefile"
    ],
    "returnPrompt": "Analyze the 'Apples and Bananas' project.",
    "assumptions": "This workspace represents Chapter 8, showcasing different programming paradigms for the same string manipulation task."
  },
  {
    "name": "09: Abuse",
    "description": "A program that generates random Shakespearean insults by combining adjectives and nouns, teaching randomness and testing.",
    "fileStructure": [
      "09_abuse/solution.py",
      "09_abuse/test.py",
      "09_abuse/README.md",
      "09_abuse/all_test.sh",
      "09_abuse/Makefile"
    ],
    "returnPrompt": "Analyze the 'Abuse' project.",
    "assumptions": "This workspace represents Chapter 9, focusing on using the `random` module and the importance of seeding for testability."
  },
  {
    "name": "10: Telephone",
    "description": "A program that randomly mutates a string with a given probability, exploring both deterministic and probabilistic approaches to generation.",
    "fileStructure": [
      "10_telephone/test.py",
      "10_telephone/README.md",
      "10_telephone/solution2_list.py",
      "10_telephone/solution1.py",
      "10_telephone/all_test.sh",
      "10_telephone/Makefile"
    ],
    "returnPrompt": "Analyze the 'Telephone' project.",
    "assumptions": "This workspace represents Chapter 10, focusing on algorithms for random string mutation and controlling randomness."
  },
  {
    "name": "11: Bottles of Beer",
    "description": "A program to generate the lyrics for the '99 Bottles of Beer' song, focusing on algorithm design, functions, and various looping constructs.",
    "fileStructure": [
      "11_bottles_of_beer/solution.py",
      "11_bottles_of_beer/sums.txt",
      "11_bottles_of_beer/test.py",
      "11_bottles_of_beer/README.md",
      "11_bottles_of_beer/mk-sums.sh",
      "11_bottles_of_beer/all_test.sh",
      "11_bottles_of_beer/Makefile"
    ],
    "returnPrompt": "Analyze the 'Bottles of Beer' project.",
    "assumptions": "This workspace represents Chapter 11, teaching how to structure a repetitive task into a reusable function and generate text algorithmically."
  },
  {
    "name": "12: Ransom Note",
    "description": "A program that creates a ransom note effect by randomly capitalizing letters in a text, exploring for loops, list comprehensions, and the map() function.",
    "fileStructure": [
      "12_ransom/solution3_for_append_string.py",
      "12_ransom/solution2_for_append_list.py",
      "12_ransom/test.py",
      "12_ransom/README.md",
      "12_ransom/solution1_for_loop.py",
      "12_ransom/solution5_shorter_list_comp.py",
      "12_ransom/solution4_list_comprehension.py",
      "12_ransom/solution6_map.py",
      "12_ransom/solution7_shorter_map.py",
      "12_ransom/all_test.sh",
      "12_ransom/Makefile"
    ],
    "returnPrompt": "Analyze the 'Ransom Note' project.",
    "assumptions": "This workspace represents Chapter 12, providing another example of applying different programming techniques to a string manipulation problem."
  },
  {
    "name": "13: Twelve Days",
    "description": "A program to generate the lyrics for 'The Twelve Days of Christmas', demonstrating use of functions within list comprehensions and maps.",
    "fileStructure": [
      "13_twelve_days/solution.py",
      "13_twelve_days/test.py",
      "13_twelve_days/README.md",
      "13_twelve_days/solution_emoji.py",
      "13_twelve_days/mk-outs.sh",
      "13_twelve_days/all_test.sh",
      "13_twelve_days/Makefile",
      "13_twelve_days/test-out/3.out",
      "13_twelve_days/test-out/10.out",
      "13_twelve_days/test-out/8.out",
      "13_twelve_days/test-out/11.out",
      "13_twelve_days/test-out/2.out",
      "13_twelve_days/test-out/6.out",
      "13_twelve_days/test-out/4.out",
      "13_twelve_days/test-out/1.out",
      "13_twelve_days/test-out/12.out",
      "13_twelve_days/test-out/7.out",
      "13_twelve_days/test-out/9.out",
      "13_twelve_days/test-out/5.out"
    ],
    "returnPrompt": "Analyze the 'Twelve Days' project.",
    "assumptions": "This workspace represents Chapter 13, focusing on composing functions and data structures to generate complex, structured text."
  },
  {
    "name": "14: Rhymer",
    "description": "A program that creates rhyming 'words' by splitting initial consonants from a word and appending new prefixes, introducing regular expressions.",
    "fileStructure": [
      "14_rhymer/test.py",
      "14_rhymer/README.md",
      "14_rhymer/solution1_regex.py",
      "14_rhymer/all_test.sh",
      "14_rhymer/solution3_dict_words.py",
      "14_rhymer/Makefile",
      "14_rhymer/solution2_no_regex.py"
    ],
    "returnPrompt": "Analyze the 'Rhymer' project.",
    "assumptions": "This workspace represents Chapter 14, teaching phonological manipulation of words and introducing regular expressions for pattern matching."
  },
  {
    "name": "15: Kentucky Friar",
    "description": "A program that uses regular expressions to alter text to sound like a Southern American dialect, e.g., changing 'you' to 'y'all'.",
    "fileStructure": [
      "15_kentucky_friar/solution2_re_compile.py",
      "15_kentucky_friar/test.py",
      "15_kentucky_friar/README.md",
      "15_kentucky_friar/solution1_regex.py",
      "15_kentucky_friar/solution3_no_regex.py",
      "15_kentucky_friar/mk-outs.sh",
      "15_kentucky_friar/all_test.sh",
      "15_kentucky_friar/Makefile",
      "15_kentucky_friar/inputs/raven.txt",
      "15_kentucky_friar/inputs/shakespeare.txt",
      "15_kentucky_friar/inputs/blake.txt.out",
      "15_kentucky_friar/inputs/shakespeare.txt.out",
      "15_kentucky_friar/inputs/dickinson.txt.out",
      "15_kentucky_friar/inputs/banner.txt.out",
      "15_kentucky_friar/inputs/raven.txt.out",
      "15_kentucky_friar/inputs/dickinson.txt",
      "15_kentucky_friar/inputs/blake.txt",
      "15_kentucky_friar/inputs/banner.txt"
    ],
    "returnPrompt": "Analyze the 'Kentucky Friar' project.",
    "assumptions": "This workspace represents Chapter 15, providing a deeper dive into practical text manipulation with regular expressions."
  },
  {
    "name": "16: Scrambler",
    "description": "A program to scramble the inner letters of each word in a text while keeping the first and last letters fixed.",
    "fileStructure": [
      "16_scrambler/solution.py",
      "16_scrambler/intro.txt",
      "16_scrambler/test.py",
      "16_scrambler/README.md",
      "16_scrambler/all_test.sh",
      "16_scrambler/Makefile"
    ],
    "returnPrompt": "Analyze the 'Scrambler' project.",
    "assumptions": "This workspace represents Chapter 16, combining regular expressions for word finding with random shuffling for an interesting text effect."
  },
  {
    "name": "17: Mad Libs",
    "description": "An implementation of the classic Mad Libs game, using regular expressions to find and replace placeholders in a story template.",
    "fileStructure": [
      "17_mad_libs/test.py",
      "17_mad_libs/README.md",
      "17_mad_libs/solution1_regex.py",
      "17_mad_libs/all_test.sh",
      "17_mad_libs/Makefile",
      "17_mad_libs/solution2_no_regex.py",
      "17_mad_libs/inputs/romeo_juliet.txt",
      "17_mad_libs/inputs/help.txt",
      "17_mad_libs/inputs/no_blanks.txt",
      "17_mad_libs/inputs/fox.txt"
    ],
    "returnPrompt": "Analyze the 'Mad Libs' project.",
    "assumptions": "This workspace represents Chapter 17, teaching interactive input handling and advanced text substitution with regex."
  },
  {
    "name": "18: Gematria",
    "description": "A program that calculates the Gematria value of words by mapping letters to numbers and summing them for a given text.",
    "fileStructure": [
      "18_gematria/solution.py",
      "18_gematria/test.py",
      "18_gematria/README.md",
      "18_gematria/words.txt",
      "18_gematria/asciitbl.py",
      "18_gematria/all_test.sh",
      "18_gematria/Makefile"
    ],
    "returnPrompt": "Analyze the 'Gematria' project.",
    "assumptions": "This workspace represents Chapter 18. Its purpose is inferred from file names, as it's not described in the main README."
  },
  {
    "name": "19: Workout Of The Day",
    "description": "A program to process and display 'Workout of the Day' (WOD) schedules from CSV files, exploring data parsing with standard libraries and pandas.",
    "fileStructure": [
      "19_wod/requirements.txt",
      "19_wod/test.py",
      "19_wod/manual3_map.py",
      "19_wod/README.md",
      "19_wod/solution1.py",
      "19_wod/using_csv1.py",
      "19_wod/manual1.py",
      "19_wod/using_pandas.py",
      "19_wod/manual2_list_comprehension.py",
      "19_wod/solution2.py",
      "19_wod/using_csv2.py",
      "19_wod/unit.py",
      "19_wod/all_test.sh",
      "19_wod/using_csv3.py",
      "19_wod/Makefile",
      "19_wod/inputs/bad-headers-only.csv",
      "19_wod/inputs/bad-reps.csv",
      "19_wod/inputs/bad-headers.csv",
      "19_wod/inputs/bad-empty.csv",
      "19_wod/inputs/bad-delimiter.tab",
      "19_wod/inputs/exercises.csv",
      "19_wod/inputs/silly-exercises.csv"
    ],
    "returnPrompt": "Analyze the 'Workout Of The Day' project.",
    "assumptions": "This workspace represents Chapter 19. The 'WOD' name and file contents suggest a project about processing fitness workout data from CSV files."
  },
  {
    "name": "20: Password Generator",
    "description": "A program that generates passwords by harvesting words (nouns, verbs, adjectives) from classic texts.",
    "fileStructure": [
      "20_password/solution.py",
      "20_password/test.py",
      "20_password/README.md",
      "20_password/harvest.py",
      "20_password/unit.py",
      "20_password/all_test.sh",
      "20_password/Makefile",
      "20_password/sonnets/nouns.txt",
      "20_password/sonnets/adjs.txt",
      "20_password/sonnets/verbs.txt",
      "20_password/const/nouns.txt",
      "20_password/const/adjs.txt",
      "20_password/const/verbs.txt",
      "20_password/scarlet/nouns.txt",
      "20_password/scarlet/adjs.txt",
      "20_password/scarlet/verbs.txt"
    ],
    "returnPrompt": "Analyze the 'Password Generator' project.",
    "assumptions": "This workspace represents Chapter 20. Its purpose is inferred from file names like 'password' and 'harvest.py' and its use of word lists."
  },
  {
    "name": "21: Tic-Tac-Toe",
    "description": "A command-line implementation of the game Tic-Tac-Toe, where the user can play against a computer opponent.",
    "fileStructure": [
      "21_tictactoe/test.py",
      "21_tictactoe/README.md",
      "21_tictactoe/solution1.py",
      "21_tictactoe/solution2.py",
      "21_tictactoe/unit.py",
      "21_tictactoe/all_test.sh",
      "21_tictactoe/Makefile"
    ],
    "returnPrompt": "Analyze the 'Tic-Tac-Toe' project.",
    "assumptions": "This workspace represents Chapter 21. Its purpose is inferred from the name and it represents a complete, testable game implementation."
  },
  {
    "name": "22: Typed Tic-Tac-Toe",
    "description": "An enhanced version of the Tic-Tac-Toe game, focusing on the use of Python's type hints and typed dictionaries for more robust code.",
    "fileStructure": [
      "22_itictactoe/typehints.py",
      "22_itictactoe/README.md",
      "22_itictactoe/solution1.py",
      "22_itictactoe/solution2_typed_dict.py",
      "22_itictactoe/typehints2.py",
      "22_itictactoe/unit.py",
      "22_itictactoe/Makefile"
    ],
    "returnPrompt": "Analyze the 'Typed Tic-Tac-Toe' project.",
    "assumptions": "This workspace represents Chapter 22. The file names indicate this is an evolution of the previous project with a focus on static typing."
  }
]