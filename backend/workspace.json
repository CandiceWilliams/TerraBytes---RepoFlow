[
  {
    "name": "Repository Utilities & Documentation",
    "description": "Contains core repository configuration files, general documentation, environment setup instructions, and utilities for managing the project.",
    "fileStructure": [
      ".gitignore",
      "all_test.sh",
      "LICENSE",
      "Makefile",
      "README.md",
      "requirements.txt",
      "appendix/Makefile",
      "appendix/SETUP_WINDOWS.adoc",
      "appendix/SETUP_WINDOWS.pdf",
      "bin/new.py",
      "docker/Dockerfile",
      "docker/Makefile",
      "docker/README.md",
      "template/template.py"
    ],
    "returnPrompt": "Explore repository utilities and documentation.",
    "assumptions": "The 'appendix' folder contains setup documentation, 'bin/new.py' is a utility for creating new projects, 'docker/' provides containerization setup, and 'template/template.py' is a base for new exercises."
  },
  {
    "name": "Common Data Inputs",
    "description": "A collection of shared text files and other data used as generic inputs for various 'Tiny Python Projects' exercises across different chapters.",
    "fileStructure": [
      "inputs/.gitignore",
      "inputs/const.txt",
      "inputs/dickinson.txt",
      "inputs/fox.txt",
      "inputs/gettysburg.txt",
      "inputs/issa.txt",
      "inputs/Makefile",
      "inputs/nobody.txt",
      "inputs/now.txt",
      "inputs/out.txt",
      "inputs/preamble.txt",
      "inputs/scarlet.txt",
      "inputs/sonnet-29.txt",
      "inputs/sonnets.txt",
      "inputs/spiders.txt",
      "inputs/the-bustle.txt",
      "inputs/usdeclar.txt",
      "inputs/words.txt.zip"
    ],
    "returnPrompt": "Examine common data inputs for the projects.",
    "assumptions": "These files are primarily generic input data that can be consumed by multiple projects rather than being specific to a single exercise's functional logic."
  },
  {
    "name": "Python Basics & Argparse",
    "description": "Covers foundational Python concepts like program structure, basic output, comments, shebangs, and a detailed exploration of command-line argument parsing with argparse.",
    "fileStructure": [
      "01_hello/hello01_print.py",
      "01_hello/hello02_comment.py",
      "01_hello/hello03_shebang.py",
      "01_hello/hello04_argparse_positional.py",
      "01_hello/hello05_argparse_option.py",
      "01_hello/hello06_main_function.py",
      "01_hello/hello07_get_args.py",
      "01_hello/hello08_formatted.py",
      "01_hello/Makefile",
      "01_hello/README.md",
      "01_hello/test.py",
      "appendix_argparse/cat_n.py",
      "appendix_argparse/cat_n_manual.py",
      "appendix_argparse/choices.py",
      "appendix_argparse/manual.py",
      "appendix_argparse/nargs+.py",
      "appendix_argparse/nargs2.py",
      "appendix_argparse/one_arg.py",
      "appendix_argparse/README.md",
      "appendix_argparse/two_args.py"
    ],
    "returnPrompt": "Work on Python basics and argparse examples.",
    "assumptions": "The '01_hello' chapter and 'appendix_argparse' provide foundational knowledge and practical examples for understanding basic Python program structure and command-line argument handling."
  },
  {
    "name": "Chapter 02 & 03: String Formatting & Arguments",
    "description": "These projects teach how to write Python programs that accept and format string arguments based on varying input counts, producing structured output.",
    "fileStructure": [
      "02_crowsnest/all_test.sh",
      "02_crowsnest/Makefile",
      "02_crowsnest/README.md",
      "02_crowsnest/solution.py",
      "02_crowsnest/test.py",
      "03_picnic/all_test.sh",
      "03_picnic/Makefile",
      "03_picnic/README.md",
      "03_picnic/solution.py",
      "03_picnic/test.py"
    ],
    "returnPrompt": "Start projects for string formatting and arguments.",
    "assumptions": "These two early chapters are conceptually similar enough to be grouped, focusing on basic input handling and formatted string output."
  },
  {
    "name": "Chapter 04: Jump The Five",
    "description": "Develops a program to encode numerals in text using the 'Jump The Five' algorithm, introducing dictionary lookups for character mapping.",
    "fileStructure": [
      "04_jump_the_five/all_test.sh",
      "04_jump_the_five/Makefile",
      "04_jump_the_five/README.md",
      "04_jump_the_five/solution1.py",
      "04_jump_the_five/solution2.py",
      "04_jump_the_five/solution3.py",
      "04_jump_the_five/solution4.py",
      "04_jump_the_five/solution5.py",
      "04_jump_the_five/test.py"
    ],
    "returnPrompt": "Work on the Jump The Five project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 05: Howler",
    "description": "Explores file I/O operations, allowing a program to process text from command line or files and output to STDOUT or a file.",
    "fileStructure": [
      "05_howler/.gitignore",
      "05_howler/all_test.sh",
      "05_howler/Makefile",
      "05_howler/mk-test-out.sh",
      "05_howler/README.md",
      "05_howler/solution1.py",
      "05_howler/solution2.py",
      "05_howler/test.py"
    ],
    "returnPrompt": "Begin the Howler project.",
    "assumptions": "The 'test-outs' directory contains generated output files and is therefore excluded from the primary development workspace."
  },
  {
    "name": "Chapter 06: Word Count",
    "description": "Implements a simplified 'wc' utility, processing multiple input files or STDIN to count lines, words, and bytes.",
    "fileStructure": [
      "06_wc/all_test.sh",
      "06_wc/Makefile",
      "06_wc/README.md",
      "06_wc/solution.py",
      "06_wc/test.py",
      "06_wc/inputs/empty.txt",
      "06_wc/inputs/foo.txt",
      "06_wc/inputs/one.txt",
      "06_wc/inputs/two.txt"
    ],
    "returnPrompt": "Start the Word Count project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 07: Gashlycrumb",
    "description": "Develops a program to build a lookup table from an input file and translate words based on positional arguments.",
    "fileStructure": [
      "07_gashlycrumb/all_test.sh",
      "07_gashlycrumb/alternate.txt",
      "07_gashlycrumb/gashlycrumb.txt",
      "07_gashlycrumb/gashlycrumb_interactive.py",
      "07_gashlycrumb/Makefile",
      "07_gashlycrumb/README.md",
      "07_gashlycrumb/solution1.py",
      "07_gashlycrumb/solution2_dict_comp.py",
      "07_gashlycrumb/solution3_dict_get.py",
      "07_gashlycrumb/test.py"
    ],
    "returnPrompt": "Dive into the Gashlycrumb project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 08: Apples and Bananas",
    "description": "Explores various string manipulation techniques in Python, specifically finding and replacing characters using loops, comprehensions, and higher-order functions.",
    "fileStructure": [
      "08_apples_and_bananas/all_test.sh",
      "08_apples_and_bananas/Makefile",
      "08_apples_and_bananas/README.md",
      "08_apples_and_bananas/solution1_iterate_chars.py",
      "08_apples_and_bananas/solution2_str_replace.py",
      "08_apples_and_bananas/solution3_str_translate.py",
      "08_apples_and_bananas/solution4_list_comprehension.py",
      "08_apples_and_bananas/solution5.1_no_closure.py",
      "08_apples_and_bananas/solution5_list_comp_function.py",
      "08_apples_and_bananas/solution6_map_lambda.py",
      "08_apples_and_bananas/solution7_map_function.py",
      "08_apples_and_bananas/solution8_regex.py",
      "08_apples_and_bananas/test.py"
    ],
    "returnPrompt": "Explore the Apples and Bananas project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 09: Abuse",
    "description": "Creates a program to generate random Shakespearean insults by combining adjectives and nouns, focusing on randomness and multi-line string handling.",
    "fileStructure": [
      "09_abuse/all_test.sh",
      "09_abuse/Makefile",
      "09_abuse/README.md",
      "09_abuse/solution.py",
      "09_abuse/test.py"
    ],
    "returnPrompt": "Work on the Abuse project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 10: Telephone",
    "description": "Implements deterministic and probabilistic approaches for randomly mutating strings, exploring techniques for introducing controlled errors.",
    "fileStructure": [
      "10_telephone/all_test.sh",
      "10_telephone/Makefile",
      "10_telephone/README.md",
      "10_telephone/solution1.py",
      "10_telephone/solution2_list.py",
      "10_telephone/test.py"
    ],
    "returnPrompt": "Begin the Telephone project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 11: Bottles of Beer",
    "description": "Generates verses for the '99 Bottles of Beer' song from a given starting point, focusing on counting down, string formatting, and function design.",
    "fileStructure": [
      "11_bottles_of_beer/all_test.sh",
      "11_bottles_of_beer/Makefile",
      "11_bottles_of_beer/mk-sums.sh",
      "11_bottles_of_beer/README.md",
      "11_bottles_of_beer/solution.py",
      "11_bottles_of_beer/sums.txt",
      "11_bottles_of_beer/test.py"
    ],
    "returnPrompt": "Dive into the Bottles of Beer project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 12: Ransom",
    "description": "Creates a program to randomly capitalize letters in text, exploring different methods like for loops, list comprehensions, and the map() function.",
    "fileStructure": [
      "12_ransom/all_test.sh",
      "12_ransom/Makefile",
      "12_ransom/README.md",
      "12_ransom/solution1_for_loop.py",
      "12_ransom/solution2_for_append_list.py",
      "12_ransom/solution3_for_append_string.py",
      "12_ransom/solution4_list_comprehension.py",
      "12_ransom/solution5_shorter_list_comp.py",
      "12_ransom/solution6_map.py",
      "12_ransom/solution7_shorter_map.py",
      "12_ransom/test.py"
    ],
    "returnPrompt": "Work on the Ransom project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 13: Twelve Days of Christmas",
    "description": "Generates verses for 'The Twelve Days of Christmas' song, focusing on function writing and using functions with list comprehensions and map().",
    "fileStructure": [
      "13_twelve_days/all_test.sh",
      "13_twelve_days/Makefile",
      "13_twelve_days/mk-outs.sh",
      "13_twelve_days/README.md",
      "13_twelve_days/solution.py",
      "13_twelve_days/solution_emoji.py",
      "13_twelve_days/test.py"
    ],
    "returnPrompt": "Begin the Twelve Days of Christmas project.",
    "assumptions": "The 'test-out' directory contains generated output files and is therefore excluded from the primary development workspace."
  },
  {
    "name": "Chapter 14: The Rhymer",
    "description": "Develops a program to generate rhyming words by splitting off initial consonants and appending prefixes, emphasizing regular expressions.",
    "fileStructure": [
      "14_rhymer/all_test.sh",
      "14_rhymer/Makefile",
      "14_rhymer/README.md",
      "14_rhymer/solution1_regex.py",
      "14_rhymer/solution2_no_regex.py",
      "14_rhymer/solution3_dict_words.py",
      "14_rhymer/test.py"
    ],
    "returnPrompt": "Start The Rhymer project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 15: The Kentucky Friar",
    "description": "Focuses on advanced regular expressions for splitting strings and replacing specific words or patterns (e.g., 'you' to 'y'all', '-ing' to '-in').",
    "fileStructure": [
      "15_kentucky_friar/all_test.sh",
      "15_kentucky_friar/Makefile",
      "15_kentucky_friar/mk-outs.sh",
      "15_kentucky_friar/README.md",
      "15_kentucky_friar/solution1_regex.py",
      "15_kentucky_friar/solution2_re_compile.py",
      "15_kentucky_friar/solution3_no_regex.py",
      "15_kentucky_friar/test.py",
      "15_kentucky_friar/inputs/banner.txt",
      "15_kentucky_friar/inputs/blake.txt",
      "15_kentucky_friar/inputs/dickinson.txt",
      "15_kentucky_friar/inputs/raven.txt",
      "15_kentucky_friar/inputs/shakespeare.txt"
    ],
    "returnPrompt": "Work on The Kentucky Friar project.",
    "assumptions": "The '.out' files within the 'inputs' directory are considered generated outputs and are thus excluded from the workspace."
  },
  {
    "name": "Chapter 16: The Scrambler",
    "description": "Develops a program to scramble letters within words (keeping first/last letters fixed) and reconstruct the text, using regex and random shuffling.",
    "fileStructure": [
      "16_scrambler/all_test.sh",
      "16_scrambler/intro.txt",
      "16_scrambler/Makefile",
      "16_scrambler/README.md",
      "16_scrambler/solution.py",
      "16_scrambler/test.py"
    ],
    "returnPrompt": "Start The Scrambler project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 17: Mad Libs",
    "description": "Implements the classic Mad Libs game, reading input files with placeholders, getting user inputs, and replacing them using regular expressions.",
    "fileStructure": [
      "17_mad_libs/all_test.sh",
      "17_mad_libs/Makefile",
      "17_mad_libs/README.md",
      "17_mad_libs/solution1_regex.py",
      "17_mad_libs/solution2_no_regex.py",
      "17_mad_libs/test.py",
      "17_mad_libs/inputs/fox.txt",
      "17_mad_libs/inputs/help.txt",
      "17_mad_libs/inputs/no_blanks.txt",
      "17_mad_libs/inputs/romeo_juliet.txt"
    ],
    "returnPrompt": "Begin the Mad Libs project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 18: Gematria",
    "description": "A program to calculate the numerical value of words based on Gematria, likely involving character-to-value mappings.",
    "fileStructure": [
      "18_gematria/all_test.sh",
      "18_gematria/asciitbl.py",
      "18_gematria/Makefile",
      "18_gematria/README.md",
      "18_gematria/solution.py",
      "18_gematria/test.py",
      "18_gematria/words.txt"
    ],
    "returnPrompt": "Explore the Gematria project.",
    "assumptions": ""
  },
  {
    "name": "Chapter 19: WOD (Workout of the Day)",
    "description": "This project focuses on processing workout data from CSV files, exploring various Pythonic ways (manual parsing, CSV module, Pandas) to handle and analyze structured data.",
    "fileStructure": [
      "19_wod/all_test.sh",
      "19_wod/Makefile",
      "19_wod/manual1.py",
      "19_wod/manual2_list_comprehension.py",
      "19_wod/manual3_map.py",
      "19_wod/README.md",
      "19_wod/requirements.txt",
      "19_wod/solution1.py",
      "19_wod/solution2.py",
      "19_wod/test.py",
      "19_wod/unit.py",
      "19_wod/using_csv1.py",
      "19_wod/using_csv2.py",
      "19_wod/using_csv3.py",
      "19_wod/using_pandas.py",
      "19_wod/inputs/bad-delimiter.tab",
      "19_wod/inputs/bad-empty.csv",
      "19_wod/inputs/bad-headers-only.csv",
      "19_wod/inputs/bad-headers.csv",
      "19_wod/inputs/bad-reps.csv",
      "19_wod/inputs/exercises.csv",
      "19_wod/inputs/silly-exercises.csv"
    ],
    "returnPrompt": "Work on the WOD project.",
    "assumptions": "The diverse set of solution files and input data collectively represent the scope of this single chapter's project."
  },
  {
    "name": "Chapter 20: Password Generator",
    "description": "A program that generates pronounceable passwords by combining words (adjectives, nouns, verbs) from various text sources, demonstrating text processing and random selection.",
    "fileStructure": [
      "20_password/all_test.sh",
      "20_password/harvest.py",
      "20_password/Makefile",
      "20_password/README.md",
      "20_password/solution.py",
      "20_password/test.py",
      "20_password/unit.py",
      "20_password/const/adjs.txt",
      "20_password/const/nouns.txt",
      "20_password/const/verbs.txt",
      "20_password/scarlet/adjs.txt",
      "20_password/scarlet/nouns.txt",
      "20_password/scarlet/verbs.txt",
      "20_password/sonnets/adjs.txt",
      "20_password/sonnets/nouns.txt",
      "20_password/sonnets/verbs.txt"
    ],
    "returnPrompt": "Begin the Password Generator project.",
    "assumptions": "The 'const', 'scarlet', and 'sonnets' directories contain data crucial for the password generation logic of this specific project."
  },
  {
    "name": "Chapter 21: Tic Tac Toe",
    "description": "Implements the core logic for a Tic Tac Toe game, likely focusing on game state management and win condition checks.",
    "fileStructure": [
      "21_tictactoe/all_test.sh",
      "21_tictactoe/Makefile",
      "21_tictactoe/README.md",
      "21_tictactoe/solution1.py",
      "21_tictactoe/solution2.py",
      "21_tictactoe/test.py",
      "21_tictactoe/unit.py"
    ],
    "returnPrompt": "Work on the Tic Tac Toe game.",
    "assumptions": ""
  },
  {
    "name": "Chapter 22: Interactive Tic Tac Toe",
    "description": "Expands on the Tic Tac Toe game, likely adding interactive elements and exploring type hinting for robust code.",
    "fileStructure": [
      "22_itictactoe/Makefile",
      "22_itictactoe/README.md",
      "22_itictactoe/solution1.py",
      "22_itictactoe/solution2_typed_dict.py",
      "22_itictactoe/typehints.py",
      "22_itictactoe/typehints2.py",
      "22_itictactoe/unit.py"
    ],
    "returnPrompt": "Develop the interactive Tic Tac Toe game.",
    "assumptions": ""
  },
  {
    "name": "Extra: Bioinformatics Challenges",
    "description": "A collection of supplementary projects focusing on biological sequence processing, including DNA and RNA manipulation and protein translation.",
    "fileStructure": [
      "extra/02_dna/Makefile",
      "extra/02_dna/README.adoc",
      "extra/02_dna/README.pdf",
      "extra/02_dna/test.py",
      "extra/07_proteins/codons.dna",
      "extra/07_proteins/codons.rna",
      "extra/07_proteins/input.dna",
      "extra/07_proteins/input.rna",
      "extra/07_proteins/Makefile",
      "extra/07_proteins/README.adoc",
      "extra/07_proteins/README.pdf",
      "extra/07_proteins/test.py",
      "extra/08_rna/Makefile",
      "extra/08_rna/README.adoc",
      "extra/08_rna/README.pdf",
      "extra/08_rna/test.py",
      "extra/08_rna/inputs/input1.txt",
      "extra/08_rna/inputs/input2.txt"
    ],
    "returnPrompt": "Explore extra bioinformatics challenges.",
    "assumptions": "These 'extra' projects are grouped by a common theme of bioinformatics-related string and sequence manipulation."
  },
  {
    "name": "Extra: String & Language Challenges",
    "description": "Additional projects exploring string manipulation, character replacement, and language-specific text processing.",
    "fileStructure": [
      "extra/02_spanish/Makefile",
      "extra/02_spanish/README.adoc",
      "extra/02_spanish/README.pdf",
      "extra/02_spanish/test.py",
      "extra/02_strings/Makefile",
      "extra/02_strings/README.adoc",
      "extra/02_strings/README.pdf",
      "extra/02_strings/test.py"
    ],
    "returnPrompt": "Work on extra string and language challenges.",
    "assumptions": "These 'extra' projects are grouped due to their focus on string manipulation and basic text transformation."
  },
  {
    "name": "Extra: Text Processing Utilities",
    "description": "Supplemental projects that implement command-line utilities for listing items, handling dates, and processing text files like 'head'.",
    "fileStructure": [
      "extra/03_lister/Makefile",
      "extra/03_lister/README.adoc",
      "extra/03_lister/README.pdf",
      "extra/03_lister/test.py",
      "extra/04_days/Makefile",
      "extra/04_days/README.adoc",
      "extra/04_days/README.pdf",
      "extra/04_days/test.py",
      "extra/06_head/Makefile",
      "extra/06_head/README.adoc",
      "extra/06_head/test.py",
      "extra/06_head/inputs/gettysburg.txt",
      "extra/06_head/inputs/sonnet-29.txt",
      "extra/06_head/inputs/the-bustle.txt"
    ],
    "returnPrompt": "Begin extra text processing utilities.",
    "assumptions": "These 'extra' projects are grouped as they represent common text processing and utility-like programs."
  },
  {
    "name": "Extra: Miscellaneous Challenges",
    "description": "Diverse supplementary projects that cover various programming challenges not fitting into other specific extra categories.",
    "fileStructure": [
      "extra/09_moog/Makefile",
      "extra/09_moog/README.adoc",
      "extra/09_moog/README.pdf",
      "extra/09_moog/test.py",
      "extra/10_whitmans/.gitignore",
      "extra/10_whitmans/Makefile",
      "extra/10_whitmans/README.adoc",
      "extra/10_whitmans/README.pdf",
      "extra/10_whitmans/requirements.txt",
      "extra/10_whitmans/solution.py",
      "extra/10_whitmans/test.py"
    ],
    "returnPrompt": "Explore miscellaneous extra challenges.",
    "assumptions": "These 'extra' projects are grouped as general supplementary exercises, as they don't form a strong thematic coherence with other specialized extra project groups."
  }
]